#include <iostream>
#include <vector>
#include <limits>
#include <queue>
#include <utility>

using namespace std;

const int INF = numeric_limits<int>::max();

class Graph {
private:
    int vertices;
    vector<vector<pair<int, int>>> adjList;

public:
    Graph(int V) : vertices(V), adjList(V) {}

    void addEdge(int u, int v, int w) {
        adjList[u].emplace_back(v, w);
        adjList[v].emplace_back(u, w);
    }

    vector<int> dijkstra(int source) {
        vector<int> dist(vertices, INF);
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;

        dist[source] = 0;
        pq.push({ 0, source });

        while (!pq.empty()) {
            int u = pq.top().second;
            pq.pop();

            for (const auto& neighbor : adjList[u]) {
                int v = neighbor.first;
                int weight = neighbor.second;

                if (dist[u] + weight < dist[v]) {
                    dist[v] = dist[u] + weight;
                    pq.push({ dist[v], v });
                }
            }
        }

        return dist;
    }
};

int main() {
    int vertices, edges;
    cout << "Enter the number of vertices: ";
    cin >> vertices;

    cout << "Enter the number of edges: ";
    cin >> edges;

    Graph graph(vertices);

    cout << "Enter edges (source destination weight):" << endl;
    for (int i = 0; i < edges; ++i) {
        int u, v, w;
        cin >> u >> v >> w;
        graph.addEdge(u, v, w);
    }

    int source, destination;
    cout << "Enter source and destination vertices: ";
    cin >> source >> destination;

    vector<int> shortestDistances = graph.dijkstra(source);

    if (shortestDistances[destination] != INF) {
        cout << "Shortest distance from " << source << " to " << destination << " is: "
            << shortestDistances[destination] << endl;
    }
    else {
        cout << "There Exists no path " << source << " to " << destination << endl;
    }

    return 0;
}
